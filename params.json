{"name":"Pi Control Service","tagline":"Control a Raspberry Pi from anywhere","body":"**Why I made this**\r\n\r\nThis project started because I had an external web server and I wanted it to get some data from sensors on a Raspberry Pi in my apartment. I didn't want to mess with a bunch of stupid networking, so that the two could talk to each other. Instead, I decided to take advantage of [RabbitMQ](https://www.rabbitmq.com/). Messaging queues, like RabbitMQ, are a common tactic for letting separate application components communicate in a simple, scalable way. It's also a great fit for controlling the Raspberry Pi in many [Internet of Things](http://en.wikipedia.org/wiki/Internet_of_Things) type projects.\r\n\r\n**What it does**\r\n\r\nUsing the GPIO service (`pi_control_service.GPIOControlService`) you have access to the Raspberry Pi's digital GPIO pins. You can turn pins on and off as well as read their values. Using the custom action service (`pi_control_service.CustomActionControlService`) you can call methods on an \"actions\" class you implement. This allows you to do just about anything, like: access [I2C](http://en.wikipedia.org/wiki/I%C2%B2C), [SPI](http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus), or the serial port, and issue system commands.\r\n\r\n\r\n## Install it\r\n\r\n```\r\npip install Pi-Control-Service\r\n```\r\n\r\n## GPIO control service\r\n\r\nThe GPIO service (`pi_control_service.GPIOControlService`) exposes access to the Raspberry Pi's digital GPIO pins. Using it you can turn pins on and off as well as read their values. The next two sections cover specifics of its configuration and usage.\r\n\r\n### Configuring the GPIO control service\r\n\r\nA config file, written in [YAML](http://en.wikipedia.org/wiki/YAML), is used to define the initial pin setup. If a pin is not defined here it will not be available to **Pi-Control-Service**. You can save this file anywhere. You will provide a path to the file in your code. The following snippet shows an example configuration file:\r\n\r\n```yaml\r\n18:\r\n  mode: OUT\r\n  initial: HIGH\r\n23:\r\n  mode: OUT\r\n  initial: LOW\r\n```\r\n\r\n* Add a numbered element for each pin to enable\r\n* `mode` - This controls whether the pin will be used for input or output. Accepted values are: `IN`, `OUT`. (Required)\r\n* `initial` - This controls the starting value of the pin. Accepted values are: `LOW`, `HIGH`. (Optional - defaults to `LOW`)\r\n\r\n### Starting the GPIO service\r\n\r\nThis part runs on your Raspberry Pi. It initializes the desired GPIO pins, connects to RabbitMQ and starts listening for messages.\r\n\r\n```python\r\nfrom pi_control_service import GPIOControlService\r\n\r\n\r\n# The RabbitMQ connection string\r\nRABBIT_URL='some_actual_connection_string'\r\n\r\n# A unique string you make up to identify a single Raspberry Pi\r\nDEVICE_KEY='my_awesome_raspberry_pi'\r\n\r\n# Path to the config file referenced in the section above\r\nPIN_CONFIG = '/path/to/config/file.yml'\r\n\r\ngpio_service = GPIOControlService(\r\n    rabbit_url=RABBIT_URL,\r\n    device_key=DEVICE_KEY,\r\n    pin_config=PIN_CONFIG)\r\n\r\ngpio_service.start()\r\n```\r\n\r\n**Note:**\r\nIn addition to the example above, the `GPIOControlService` class takes an optional argument `reconnect_attempts`. This is in integer represneting the number of times to attempt reconnection with RabbitMQ. These attempts will be made if the connection to RabbitMQ is interrupted after the `start()` method is called.\r\n\r\n\r\n### Using the GPIO service\r\n\r\nFor convenience there is a [client library](https://github.com/projectweekend/Pi-Control-Client) you can install and use on the computer that will be remotely controlling a Raspberry Pi. The same `RABBIT_URL` and `DEVICE_KEY` values referenced in the section above are also used to connect the client.\r\n\r\n#### Installing the client\r\n\r\n```\r\npip install Pi-Control-Client\r\n```\r\n\r\n#### Using the client\r\n\r\n```python\r\nfrom pi_control_client import GPIOClient\r\n\r\n# The RabbitMQ connection string (must match the one used when starting the service)\r\nRABBIT_URL='some_actual_connection_string'\r\n\r\n# A unique string you make up to identify a single Raspberry Pi (must match the one used when starting the service)\r\nDEVICE_KEY='my_awesome_raspberry_pi'\r\n\r\npins_client = GPIOClient(rabbit_url=RABBIT_URL)\r\n\r\n# Get all pins config\r\nresult = pins_client.read_config(DEVICE_KEY)\r\n\r\n# Get a pin config\r\nresult = pins_client.read_config(DEVICE_KEY, 18)\r\n\r\n# Turn a pin on\r\npins_client.on(DEVICE_KEY, 18)\r\n\r\n# Turn a pin off\r\npins_client.off(DEVICE_KEY, 18)\r\n\r\n# Read a pin value\r\nresult = pins_client.read_value(DEVICE_KEY, 18)\r\n```\r\n\r\nIf you are already familar with RabbitMQ, you can implement your own client using any language. Things to know:\r\n\r\n* The exchange name is: `gpio_control`\r\n* The `DEVICE_KEY` value is the routing key\r\n* The JSON messages sent to the broker should be formatted like the following examples:\r\n\r\n\r\n#### Turn a pin on\r\n```json\r\n{\r\n    \"pin\": 18,\r\n    \"action\": \"on\"\r\n}\r\n```\r\n\r\n\r\n#### Turn a pin off\r\n```json\r\n{\r\n    \"pin\": 18,\r\n    \"action\": \"off\"\r\n}\r\n```\r\n\r\n\r\n#### Read a pin value\r\n```json\r\n{\r\n    \"pin\": 18,\r\n    \"action\": \"read\"\r\n}\r\n```\r\n\r\n\r\n#### Read config for all pins\r\n```json\r\n{\r\n    \"action\": \"get_config\"\r\n}\r\n```\r\n\r\n\r\n#### Read config for one pin\r\n```json\r\n{\r\n    \"pin\": 18,\r\n    \"action\": \"get_config\"\r\n}\r\n```\r\n\r\n\r\n## Custom action service\r\n\r\nThe custom action service (`pi_control_service.CustomActionControlService`) allows you to call methods on a special \"actions\" class that you define. Using it, the possibilities are almost limitless.\r\n\r\n\r\n### Starting the custom action service\r\n\r\nThis part runs on your Raspberry Pi. It connects to RabbitMQ and starts listening for messages.\r\n\r\n```python\r\nimport subprocess\r\n\r\nfrom pi_control_service import CustomActionControlService\r\n\r\n\r\n# The RabbitMQ connection string\r\nRABBIT_URL='some_actual_connection_string'\r\n\r\n# A unique string you make up to identify a single Raspberry Pi\r\nDEVICE_KEY='my_awesome_raspberry_pi'\r\n\r\n# This class contains all the custom actions that the service will expose\r\nclass Actions(object):\r\n\r\n    def hello_world(self):\r\n        return {'message': \"I do what I want!\"}\r\n\r\n    def cpu_temp(self):\r\n        return subprocess.check_output([\"/opt/vc/bin/vcgencmd\", \"measure_temp\"])\r\n\r\n\r\ncustom_actions = CustomActionControlService(\r\n    rabbit_url=RABBIT_URL,\r\n    device_key=DEVICE_KEY,\r\n    actions=Actions())\r\n\r\ncustom_actions.start()\r\n```\r\n\r\n### Using the custom action service\r\n\r\nFor convenience there is a [client library](https://github.com/projectweekend/Pi-Control-Client) you can install and use on the computer that will be remotely controlling a Raspberry Pi. The same `RABBIT_URL` and `DEVICE_KEY` values referenced in the section above are also used to connect the client.\r\n\r\n\r\n#### Installing the client\r\n\r\n```\r\npip install Pi-Control-Client\r\n```\r\n\r\n\r\n#### Using the client\r\n\r\n```python\r\nfrom pi_control_client import CustomActionClient\r\n\r\n# The RabbitMQ connection string (must match the one used when starting the service)\r\nRABBIT_URL='some_actual_connection_string'\r\n\r\n# A unique string you make up to identify a single Raspberry Pi (must match the one used when starting the service)\r\nDEVICE_KEY='my_awesome_raspberry_pi'\r\n\r\nactions_client = CustomActionClient(rabbit_url=RABBIT_URL)\r\n\r\n# Call a custom action\r\nresult = actions_client.call(DEVICE_KEY, 'name_of_action_method')\r\n```\r\n\r\nIf you are already familar with RabbitMQ, you can implement your own client using any language. Things to know:\r\n\r\n* The exchange name is: `custom_action_control`\r\n* The `DEVICE_KEY` value is the routing key\r\n* The JSON messages sent to the broker should be formatted like the following examples:\r\n\r\n\r\n#### Call an action\r\n```json\r\n{\r\n    \"action\": \"name_of_action_method\"\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}